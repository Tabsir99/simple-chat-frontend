Any and every request that passes through an express Router() middleware, actually intercepts the middleware
even if the requested route have nothing to do with it.

so for example, if there is a Express Router like
const testRoute = Express.Router()
testRoute.use(somemidleware)

app.use(testRoute)


app.get("/someRoute",controller)


over here even if the request is for /someRoute, it will be intercepted byt the middleware of testRoute

which can create unintended effects, in order to avoid it, the specific route needs to be before the testRoute
Or the middleware used in the Express Router, needs to have a path tied to it, like
app.use('/test', somemidleware) and of course in that case the testRoute it self needs to have that same
path in order to work correctly 

app.use('/test', testRoute) like so









































<div
L9EKMTV7HWKU5EXQUM39G26W MG
      key={message.messageId}
      className={`flex ${
        message.type === "outgoing" ? "justify-end" : "justify-start"
      }`}
    >
      <div className="flex flex-col max-w-sm">
        <div className="flex items-end gap-2">
          {message.type === "incoming" ? (
            message.profilePicture ? (
              <div className="w-8 h-8 flex-shrink-0 mb-1">
                <Image
                  src={message.profilePicture}
                  alt={message.senderName}
                  width={40}
                  height={40}
                  className="rounded-full w-full h-full object-cover"
                />
              </div>
            ) : (
              <span className="flex-shrink-0 flex justify-center items-center w-10 h-10 rounded-full bg-gray-500 uppercase mb-1">
                {message.senderName.slice(0, 2)}
              </span>
            )
          ) : null}

          
          <div
            className="
                group relative"
          >
            <div
              className={`
                relative
                ${message.type === "outgoing" ? "bg-blue-600" : "bg-gray-700"}
                text-white p-3 rounded-lg
                ${message.isDeleted ? "opacity-50" : ""}
              `}
            >
              {/* Message Menu */}
              {!message.isDeleted && (
                <button
                  onClick={() => setShowMenu(!showMenu)}
                  className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                >
                  <MoreVertical size={16} />
                </button>
              )}

              {showMenu && (
                <div className="absolute top-8 right-0 bg-gray-800 rounded-lg shadow-lg py-1 z-10">
                  <button
                    onClick={() => {
                      onReply(message.messageId);
                      setShowMenu(false);
                    }}
                    className="flex items-center gap-2 px-4 py-2 hover:bg-gray-700 w-full"
                  >
                    <Reply size={16} />
                    <span>Reply</span>
                  </button>
                  {isOwner && (
                    <>
                      <button
                        onClick={() => {
                          setIsEditing(true);
                          setShowMenu(false);
                        }}
                        className="flex items-center gap-2 px-4 py-2 hover:bg-gray-700 w-full"
                      >
                        <Pencil size={16} />
                        <span>Edit</span>
                      </button>
                      <button
                        onClick={() => {
                          onDelete(message.messageId);
                          setShowMenu(false);
                        }}
                        className="flex items-center gap-2 px-4 py-2 hover:bg-gray-700 w-full text-red-400"
                      >
                        <Trash size={16} />
                        <span>Delete</span>
                      </button>
                    </>
                  )}
                </div>
              )}

              {/* Message Content */}
              {message.isDeleted ? (
                <p className="italic text-gray-400">This message was deleted</p>
              ) : isEditing ? (
                <div className="flex flex-col gap-2">
                  <input
                    type="text"
                    value={editedContent}
                    onChange={(e) => setEditedContent(e.target.value)}
                    className="bg-gray-600 rounded px-2 py-1"
                  />
                  <div className="flex gap-2 justify-end">
                    <button
                      onClick={() => setIsEditing(false)}
                      className="p-1 hover:bg-gray-600 rounded"
                    >
                      <X size={16} />
                    </button>
                    <button
                      onClick={handleEdit}
                      className="p-1 hover:bg-gray-600 rounded"
                    >
                      <Check size={16} />
                    </button>
                  </div>
                </div>
              ) : (
                <>
                  <p>{message.content}</p>
                  {message.isEdited && (
                    <span className="text-xs text-gray-400 ml-2">(edited)</span>
                  )}
                </>
              )}

              {/* Attachments */}
              {message.attachments && message.attachments.length > 0 && (
                <Attachments attachments={message.attachments} />
              )}

              <div className="flex items-center justify-between mt-1">
                <span className="text-xs text-gray-300">{message.time}</span>
                {message.readBy && message.readBy.length > 0 && (
                  <div className="flex -space-x-1">
                    {message.readBy.map((user, index) => (
                      <div
                        key={index}
                        className="w-3 h-3 rounded-full bg-green-500 border-2 border-gray-800"
                        title={`Read by ${user}`}
                      />
                    ))}
                  </div>
                )}
              </div>
            </div>

            <ReactionButton
            currentUser={currentUser}
            message={message}
            toggleReaction={toggleReaction}
          />
          </div>

          
        </div>
      </div>

      {/* Reactions */}
      {message.reactions.length > 0 && (
        <ReactionDisplay
          currentUser={currentUser}
          message={message}
          toggleReaction={toggleReaction}
        />
      )}
    </div>

























// import React, {
//   createContext,
//   useState,
//   useEffect,
//   useCallback,
//   ReactNode,
//   useRef,
// } from "react";
// import { jwtDecode } from "jwt-decode";
// import { useRouter } from "next/navigation";
// import FullPageLoader from "../ui/fullpageloader";
// import { IUserMiniProfile } from "@/types/userTypes";

// interface AuthContextType {
//   accessToken: string | null;
//   loading: boolean;
//   checkAndRefreshToken: () => Promise<void>;
//   user: Omit<IUserMiniProfile, "bio"> | null;
// }

// interface DecodedToken {
//   exp: number;
//   userId: string;
// }

// export const AuthContext = createContext<AuthContextType | undefined>(
//   undefined
// );

// export const AuthProvider: React.FC<{ children: ReactNode }> = ({
//   children,
// }) => {
//   const [accessToken, setAccessToken] = useState<string | null>(null);
//   const [loading, setLoading] = useState<boolean>(true);
//   const [user, setUser] = useState<Omit<IUserMiniProfile, "bio"> | null>(null);

//   const refreshAccessToken = useCallback(async () => {
//     let retryAttempt = 0;
//     const makeRequest = async () => {
//       try {
//         const response = await fetch(
//           `${process.env.NEXT_PUBLIC_API_URL}/auth/verify-refresh`,
//           {
//             method: "POST",
//             credentials: "include",
//             cache: "no-cache",
//           }
//         );
//         if (response.ok) {
//           const { accessToken } = await response.json();
//           setAccessToken(accessToken);
//           const decoded = jwtDecode<DecodedToken>(accessToken);
//         } else if (response.status !== 401) {
//           setAccessToken(null);
          
//           throw new Error("Failed to refresh token");
//         }
//       } catch (error) {
//         if (retryAttempt < 2) {
//           retryAttempt++;
//           await makeRequest();
//         } else {
//           console.error("Token refresh failed after retry:", error);
//           setAccessToken(null);
//         }
//       }
//       finally{
//         setLoading(false)
//       }
//     };
//     await makeRequest();
//   }, []);

//   const checkAndRefreshToken = useCallback(async () => {
//     if (accessToken) {
//       const decodedToken = jwtDecode<DecodedToken>(accessToken);
//       const currentTime = Math.floor(Date.now() / 1000);

//       console.log(decodedToken.exp - currentTime);
//       if (decodedToken.exp - currentTime < 180) {
//         await refreshAccessToken();
//       }
//     } else {
//       await refreshAccessToken();
//     }

//   }, [accessToken, refreshAccessToken]);

//   useEffect(() => {
//     checkAndRefreshToken()
//   },[])

//   // Initial load
//   useEffect(() => {
//     if (user || !accessToken) return;

//     fetch(
//       `${process.env.NEXT_PUBLIC_API_URL}/users/me?userId=true&username=true&profilePicture=true`,
//       {
//         headers: {
//           authorization: `Bearer ${accessToken}`,
//         },
//       }
//     ).then((res) => {
//       if (res.ok) {
//         res.json().then((data: Omit<IUserMiniProfile, "bio">) => {
//           setUser(data);
//         });
//       }
//     });
//   }, [accessToken]);

//   const contextValue: AuthContextType = {
//     accessToken,
//     loading: loading && !user,
//     checkAndRefreshToken,
//     user,
//   };

//   return (
//     <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>
//   );
// };

// export const useAuth = (): AuthContextType => {
//   const context = React.useContext(AuthContext);
//   if (context === undefined) {
//     throw new Error("useAuth must be used within an AuthProvider");
//   }
//   return context;
// };



